Directive:   #include
Library:    <stdio.h>
Directive:   #include
Library:    <string.h>
Directive:   #include
Library:    <stdlib.h>
Directive:   #include
Library:    <ctype.h>
Directive:   #include
String:   "dfa.h"
Directive:   #define
Variable:   MAX_WORD_LENGTH
Number:   30
Directive:   #define
Variable:   MAX_FILENAME_LENGTH
Number:   100
Variable:   const
DataType:   char
Operator:   *
Variable:   test_directory
Operator:   =
String:   "Tests/"
Delimiter:   ;
Variable:   const
DataType:   char
Operator:   *
Variable:   result_directory
Operator:   =
String:   "Results/output"
Delimiter:   ;
DataType:   int
Function:   main
Delimiter:   (
Delimiter:   )
Delimiter:   {
DataType:   char
Variable:   input_file_path
Delimiter:   [
Variable:   MAX_FILENAME_LENGTH
Delimiter:   ]
Delimiter:   ;
DataType:   char
Variable:   file_name
Delimiter:   [
Variable:   MAX_FILENAME_LENGTH
Delimiter:   ]
Delimiter:   ;
Variable:   FILE
Operator:   *
Variable:   input_file
Operator:   =
Variable:   NULL
Delimiter:   ;
Reserved:   while
Delimiter:   (
Variable:   input_file
Operator:   =
Operator:   =
Variable:   NULL
Delimiter:   )
Delimiter:   {
FunctionCall:   printf
Delimiter:   (
String:   "Enter a file name: "
Delimiter:   )
Delimiter:   ;
FunctionCall:   scanf
Delimiter:   (
String:   "%s"
Delimiter:   ,
Variable:   file_name
Delimiter:   )
Delimiter:   ;
DataType:   char
Variable:   file_path
Delimiter:   [
Variable:   MAX_FILENAME_LENGTH
Delimiter:   ]
Delimiter:   ;
FunctionCall:   strcpy
Delimiter:   (
Variable:   file_path
Delimiter:   ,
Variable:   test_directory
Delimiter:   )
Delimiter:   ;
FunctionCall:   strcat
Delimiter:   (
Variable:   file_path
Delimiter:   ,
Variable:   file_name
Delimiter:   )
Delimiter:   ;
Variable:   input_file
Operator:   =
FunctionCall:   fopen
Delimiter:   (
Variable:   file_path
Delimiter:   ,
String:   "r"
Delimiter:   )
Delimiter:   ;
Reserved:   if
Delimiter:   (
Variable:   input_file
Operator:   =
Operator:   =
Variable:   NULL
Delimiter:   )
FunctionCall:   printf
Delimiter:   (
String:   "Couldn't open the input file: %s\n"
Delimiter:   ,
Variable:   file_path
Delimiter:   )
Delimiter:   ;
Reserved:   else
FunctionCall:   strcpy
Delimiter:   (
Variable:   input_file_path
Delimiter:   ,
Variable:   file_path
Delimiter:   )
Delimiter:   ;
Delimiter:   }
Variable:   DFA
Variable:   dfa
Delimiter:   ;
FunctionCall:   initialise_transition_map
Delimiter:   (
Operator:   &
Variable:   dfa
Delimiter:   )
Delimiter:   ;
FunctionCall:   initialise_dfa
Delimiter:   (
Operator:   &
Variable:   dfa
Delimiter:   ,
Variable:   input_file
Delimiter:   )
Delimiter:   ;
FunctionCall:   printf
Delimiter:   (
String:   "DFA initialized successfully.\n"
Delimiter:   )
Delimiter:   ;
FunctionCall:   determine_reachable_states
Delimiter:   (
Operator:   &
Variable:   dfa
Delimiter:   )
Delimiter:   ;
FunctionCall:   partition_dfa
Delimiter:   (
Operator:   &
Variable:   dfa
Delimiter:   )
Delimiter:   ;
DataType:   char
Variable:   output_file_path
Delimiter:   [
Variable:   MAX_FILENAME_LENGTH
Delimiter:   ]
Delimiter:   ;
FunctionCall:   strcpy
Delimiter:   (
Variable:   output_file_path
Delimiter:   ,
Variable:   result_directory
Delimiter:   )
Delimiter:   ;
FunctionCall:   strcat
Delimiter:   (
Variable:   output_file_path
Delimiter:   ,
Variable:   input_file_path
Operator:   +
FunctionCall:   strlen
Delimiter:   (
Variable:   test_directory
Delimiter:   )
Operator:   +
Number:   5
Delimiter:   )
Delimiter:   ;
Variable:   FILE
Operator:   *
Variable:   output_file
Delimiter:   ;
Variable:   output_file
Operator:   =
FunctionCall:   fopen
Delimiter:   (
Variable:   output_file_path
Delimiter:   ,
String:   "w"
Delimiter:   )
Delimiter:   ;
FunctionCall:   print_dfa_details
Delimiter:   (
Operator:   &
Variable:   dfa
Delimiter:   ,
Variable:   output_file
Delimiter:   )
Delimiter:   ;
FunctionCall:   print_dfa_original
Delimiter:   (
Operator:   &
Variable:   dfa
Delimiter:   ,
Variable:   output_file
Delimiter:   )
Delimiter:   ;
FunctionCall:   printf
Delimiter:   (
String:   "DFA details written to the output file: %s\n"
Delimiter:   ,
Variable:   output_file_path
Delimiter:   )
Delimiter:   ;
Reserved:   return
Number:   0
Delimiter:   ;
Delimiter:   }
